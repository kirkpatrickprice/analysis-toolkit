name: Cross-Platform Full Tests

on:
  # Trigger on push to main branch only
  push:
    branches:
      - main
  
  # Trigger on pull requests to main
  pull_request:
    branches:
      - main
  
  # Allow manual triggering from GitHub web interface
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}
    env:
      FORCE_COLOR: 1
      COLUMNS: 120
      LINES: 30
      TERM: xterm-256color
      # Additional environment variables for Windows CI stability
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1
      # Force Rich console width in CI environments
      RICH_FORCE_TERMINAL: 1
    
    strategy:
      fail-fast: false  # Continue testing other combinations even if one fails
      matrix:
        include:
          # Windows: Quick tests (unit + integration/cli + regression) excluding slow tests
          - os: windows-latest
            python-version: "3.12"
            test-category: "quick"
            test-path: "tests/unit/ tests/integration/cli/ tests/regression/"
            markers: "not slow and not performance"
            
          # Ubuntu: Full test suite with all categories (comprehensive validation)
          - os: ubuntu-latest
            python-version: "3.12"
            test-category: "full"
            test-path: "tests/"
            markers: ""
            
          # macOS: Integration and E2E tests excluding performance tests
          - os: macos-latest
            python-version: "3.12"
            test-category: "integration"
            test-path: "tests/integration/ tests/e2e/"
            markers: "not performance"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        version: "latest"
        enable-cache: true
    
    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          ${{ runner.os == 'Windows' && '%LOCALAPPDATA%\uv\cache' || '' }}
        key: ${{ runner.os }}-uv-${{ hashFiles('uv.lock') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv sync --dev

    - name: Set Console Environment (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "COLUMNS=120" >> $GITHUB_ENV
        echo "LINES=30" >> $GITHUB_ENV
        echo "TERM=xterm-256color" >> $GITHUB_ENV

    - name: Run ${{ matrix.test-category }} tests (with markers)
      if: matrix.markers != ''
      run: |
        uv run pytest ${{ matrix.test-path }} -m "${{ matrix.markers }}" --color=yes -v --tb=short --junitxml=pytest-results-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.test-category }}.xml
    
    - name: Run ${{ matrix.test-category }} tests (all tests)
      if: matrix.markers == ''
      run: |
        uv run pytest ${{ matrix.test-path }} --color=yes -v --tb=short --junitxml=pytest-results-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.test-category }}.xml
    
    - name: Run syntax check
      if: always()
      run: |
        uv run python -c "import compileall; import sys; sys.exit(0 if compileall.compile_dir('src/kp_analysis_toolkit', quiet=1) else 1)"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.test-category }}
        path: |
          pytest-results-*.xml
          .pytest_cache/
    
    - name: Publish test results
      uses: dorny/test-reporter@v1.9.1
      if: always() && github.event_name == 'pull_request'
      with:
        name: Pytest Results (${{ matrix.os }}, Python ${{ matrix.python-version }}, ${{ matrix.test-category }})
        path: pytest-results-*.xml
        reporter: java-junit
