global:
  sysFilter:
    - attr: osFamily
      comp: eq
      value: Darwin

01_system_01_kpmacversion:
  regex: 'KPMACVERSION: (?P<KPMACVERSION>.*)'
  maxResults: 1
  onlyMatching: True
  groupList:
    - 'KPMACVERSION'
  comment: |-
    KPMacAudit version information.  Use this to confirm that all script results were produced with a recent version.
    
    Check the version history comments in https://github.com/kirkpatrickprice/macos-auditor/blob/main/kpmacaudit.sh
    to determine if you're missing anything you find important.
01_system_02_macos_version:                                                     # Debian uses the PRETTY_NAME consistently
  regex: 'System_VersionInformation::((ProductName:\s+(?P<productName>\w+))|(ProductVersion+:\s+(?P<productVersion>[\w.]+))|(BuildVersion:\s+(?P<buildVersion>\w+)))'  
  maxResults: 1                                                           # Only grab the first hit / will be faster as it will move on to the next file right away
  onlyMatching: True
  combine: True
  groupList:
    - 'productName'
    - 'productVersion'
    - 'buildVersion'
  comment: |-
    Collecting some basic information about the system.  Take a look through this section to confirm that each system is running a supported version of macOS.
    Check out Confluence (https://kirkpatrickprice.atlassian.net/l/cp/PL1PAm9Y) for some resources on where to confirm the end-of-life status.
01_system_03_periodic:
  regex: 'System_Periodic::/etc/periodic/(?P<frequency>(daily|weekly|monthly))/(?P<jobName>.*?)::'
  onlyMatching: True
  unique: True
  groupList:
    - frequency
    - jobName
  comment: |-
    Periodic is the MacOS task scheduler, so you can use this to get a list of the scheduled tasks running on a system.  E.g. backup jobs on database servers.
    Additionally, in the raw text file results, the contents of any scripts located in /etc/periodic/.* are provided.  If there any interesting jobs -- like a backup job on DB server --
    you might look at them to see if there are hard-coded passwords or other interesting bits in there.

    NOTE: On a typical user system, all of the jobs could be only those which are included by default and probably won't be very interesting.
01_system_04_file_system_encryption_apfs:
  regex: 'System_FSEncryption-APFS-(status::FileVault is (?P<filevaultStatus>\w+)|haspersonalrecoverykey::(?P<hasPersonalRecoveryKey>.*)|hasinstitutionalrecoverykey::(?P<hasInstitutionalRecoveryKey>.*))'
  comment: |-
    File system encryption on MacOS is provided by FileVault.  The exact implementation depends on the file system type -- APFS or CoreStorage.
    APFS uses the 'fdesetup' and 'diskutil ap' command sets, while CoreStorage status can be seen with the 'diskutil cs list' command.
    See https://support.apple.com/guide/deployment/manage-filevault-with-mdm-dep0a2cb7686/web for additional information.

    This file shows the results for APFS-based file systems, which is the system default on recent MacOS versions.

    Apple no longer recommends using institutional recovery keys, so ideally we would see that this is disabled (https://derflounder.wordpress.com/2021/10/29/use-of-filevault-institutional-recovery-keys-no-longer-recommended-by-apple/).
  groupList:
    - filevaultStatus
    - hasPersonalRecoveryKey
    - hasInstitutionalRecoveryKey
  onlyMatching: True
  combine: True
01_system_05_file_system_mounts:
  regex: 'System_FSMounts-mounts::(?P<device>.*?)\s+on\s+(?P<mountPoint>[\w/]+)\s+\((?P<options>.*)\)'
  onlyMatching: True
  groupList:
    - device
    - mountPoint
    - options
  comment: |-
    A list of all active file system mounts on the system.  Useful for all kinds of things including "connected to" for PCI, confirming backup destinations through NFS, connections to SMB/Windows servers, etc
01_system_10_installed_apps_macos:
  regex: 'System_InstalledApps-MacOS::((\s{4}(?P<appName>\w.*):)|(\s{6}Version:\s+(?P<version>.*)|(\s{6}Obtained from:\s+(?P<obtainedFrom>.*))|(\s{6}Last Modified:\s+(?P<lastModified>.*?),)|(\s{6}Kind:\s+(?P<kind>.*))|(\s{6}Signed by:\s+(?P<signedBy>.*))|(\s{6}Location:\s+(?P<location>.*))))'
  onlyMatching: True
  combine: True
  groupList:
    - appName
    - version
    - obtainedFrom
    - lastModified
    - signedBy
    - location
  comment: |-
    A list of all applications registered with the operating system.  Use this information to identify unexpected software as well as to confirm if the currently installed versions have any vulnerabilities.
01_system_11_pending_updates_apple:
  regex: 'System_PendingUpdates-Apple::.+Title:\s(?P<title>.*?),\s+Version:\s(?P<version>[\d.]+?),.*Recommended:\s+(?P<recommended>.*?),'
  onlyMatching: True
  groupList:
    - title
    - version
    - recommended
  comment: |-
    This list contains the available updates from Apple for the operation system and other Apple-provided software.
01_system_11_pending_updates_brew:
  regex: 'System_PendingUpdates-Brew-(?P<user>\w+)::(?P<title>\w.*?)\s+(?P<currentVersion>[\w\.-]+?)\s->\s(?P<pendingVersion>[\w\.-]+)'
  onlyMatching: True
  groupList:
    - title
    - currentVersion
    - pendingVersion
  comment: |-
    Brew is a popular package management utility for MacOS systems to install 3rd-party software.  Specifically, it bypasses the Apple Store.  This list contains the available updates for Brew-installed software.
01_system_12_running_processes:
  regex: 'System_RunningProcesses::\s+(?P<user>[\d+]+)\s+(?P<pid>\d+)\s+(?P<parentPid>\d+)\s+(?P<cpu>\d+)\s+(?P<startTime>.+?)\s+(?P<tty>.+?)\s+(?P<time>[\d:.]+)\s+(?P<command>.*)'
  onlyMatching: True
  groupList:
    - user
    - pid
    - parentPid
    - cpu
    - startTime
    - tty
    - time
    - command
  comment: |-
    This is as good as a blood test at the doctor's office.  If it's not listed here, the process isn't running. You can use it to find running anti-virus daemons, database servers, web servers, pretty much anything

    The most interesting fields are:
        - user = The username that's running the process.  If you see any web servers running as root, well... that's a really bad practice
        - start = When did the process last start up.  If you see any really long-lived web servers, well... you can bet they haven't been patched since they were last started
        - command = the actual process name and the options that were passed to it upon startup.  Sometimes you might find passwords or other sensitive data in the command line options

      If you would like to learn more about the other fields, use "man ps" from your WSL prompt.  While the information is not identical to MacOS, it will be pretty close.
01_system_13_system_services:
  regex: 'System_ServiceInfo::(?P<pid>[\d-]+)\s+(?P<exitStatus>\d+)\s+(?P<label>.*)'
  onlyMatching: True
  groupList:
    - pid
    - exitStatus
    - label
  comment: |-
    This section attempts to get the status of all of the running services on a system.  MacOS services are more OS feature-related (akin to Windows) than how we use the same term in Linux (network-accessible servers)
    For network-accessible servers, see "Network_ListeningServices" below.
    In this list:
      - PID: If there's a number in the first field, it means the service is currently running.  
      - ExitStatus: The second column displays the last exit status of the job (0 means that it exited normally).
      - Label: The third column is the job's label.
01_system_14_system_integrity_protection:
  regex: 'System_IntegrityProtection::System Integrity Protection status:\s(?P<status>\w+)'
  onlyMatching: True
  groupList:
    - status
  comment: |-
    System Integrity Protection provides restrictions on interactions with system-level processes.
01_system_15_amfi:
  regex: 'System_AMFI::(?P<disabled>\d+)'
  onlyMatching: True
  groupList:
    - disabled
  comment: |-
    Apple Mobile File Integrity (AMFI) is the macOS kernel module that enforces code-signing and library validation.  It's always enabled unless it's been specifically disabled.
    
    This check should report as '0' meaning that the service has NOT been disabled.
01_system_16_ssv:
  regex: 'System_SSV::Authenticated Root status:\s+(?P<status>\w+)'
  onlyMatching: True
  groupList:
    - status
  comment: |-
    The Sealed System Volume (SSV) feature computes a SHA-256 hash of system files that should not change.  The hash is compared at boot time.
01_system_17_system_prefs_locked:
  regex: 'System_SystemPrefsLocked::(?P<status>\d+)'
  onlyMatching: True
  groupList:
    - status
  comment: |-
    This setting determines whether a password is required to access system-wide preferences.  We're looking for "1" to show that the setting is enabled
