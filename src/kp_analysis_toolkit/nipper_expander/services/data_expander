"""Service to expand data rows into one row per device."""

from __future__ import annotations

from typing import TYPE_CHECKING

import pandas as pd

from kp_analysis_toolkit.core.services.rich_output import RichOutputService

if TYPE_CHECKING:
    from kp_analysis_toolkit.core.services.csv_processing import CSVProcessor
    from kp_analysis_toolkit.core.services.rich_output import RichOutputService
    from kp_analysis_toolkit.models.types import DisplayableValue


class DataExpansionService:
    """Service for expanding multi-value data fields into separate rows."""

    def __init__(
        self,
        rich_output: RichOutputService,
        csv_processor: CSVProcessor,
    ) -> None:
        """
        Initialize the DataExpansionService.

        Args:
            rich_output: Service for rich terminal output
            csv_processor: Service for processing CSV files

        """
        self.rich_output: RichOutputService = rich_output
        self.csv_processor: CSVProcessor = csv_processor

    def expand_device_rows(self, data_frame: pd.DataFrame) -> pd.DataFrame:
        """Expand rows with multi-line device data into individual rows."""

    def validate_and_clean_devices(self, data_frame: pd.DataFrame) -> list[str]:
        """
        Ensure that device strings are valid and clean.

        Args:
            data_frame (pd.DataFrame): DataFrame containing the 'Devices' column.

        Returns:
            list[str]: List of cleaned device strings.

        """
        if not self.csv_processor.validate_required_columns(data_frame, ["Devices"]):
            error_msg = "'Devices' column is required but not found in CSV file"
            raise KeyError(error_msg)

        if pd.isna(devices_str) or devices_str is None:
            return []

        # Split by line breaks and clean whitespace
        devices = self._split_devices(devices_str)
        return [device.strip() for device in devices if device.strip()]

    def _split_devices(self, devices_str: str) -> list[str]:
        """Split device string by line breaks and clean whitespace."""
        return [d.strip() for d in devices_str.splitlines()]

    def _create_expanded_row(
        self,
        original_row: pd.Series,
        device: str,
    ) -> dict[str, DisplayableValue]:
        """Create a new row for a single device."""
        new_row: pd.Series = original_row
        new_row["Devices"] = device
        return new_row
